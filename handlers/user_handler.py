#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import DIRECTIONS, APPLICATION_FORM_SEND, APPLICATION_FORM_RECEIVE

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserStates:
    WAITING_APPLICATION = 'waiting_application'


class UserHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    
    def __init__(self, db, user_states, user_applications):
        self.db = db
        self.user_states = user_states
        self.user_applications = user_applications
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states:
            del self.user_states[user_id]
        
        welcome_message = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞—è–≤–æ–∫!

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:
        """
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥", callback_data="operation_send")],
            [InlineKeyboardButton("üí∞ –ü–æ–ª—É—á–∞–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥", callback_data="operation_receive")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ï—Å–ª–∏ —ç—Ç–æ callback query (–∫–Ω–æ–ø–∫–∞ "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"), —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(
                welcome_message,
                reply_markup=reply_markup
            )
        else:
            # –ò–Ω–∞—á–µ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                welcome_message,
                reply_markup=reply_markup
            )
    
    async def handle_operation_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        operation = query.data.replace("operation_", "")
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        
        self.user_states[user_id]['operation'] = operation
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await self.show_direction_selection(update, context)
    
    async def show_direction_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        keyboard = []
        for direction, description in DIRECTIONS.items():
            keyboard.append([InlineKeyboardButton(description, callback_data=f"direction_{direction}")])
        
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üèóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def handle_direction_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        query = update.callback_query
        user_id = query.from_user.id
        
        direction = query.data.replace("direction_", "")
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction}")
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {list(DIRECTIONS.keys())}")
        logger.info(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction} –≤ DIRECTIONS: {direction in DIRECTIONS}")
        
        if direction not in DIRECTIONS:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        operation = self.user_states.get(user_id, {}).get('operation', 'send')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            'state': UserStates.WAITING_APPLICATION,
            'direction': direction,
            'operation': operation,
            'timestamp': time.time()
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è —Ñ–æ—Ä–º–∞ –Ω—É–∂–Ω–∞
        if operation == 'send':
            form_text = APPLICATION_FORM_SEND
        else:
            form_text = APPLICATION_FORM_RECEIVE
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏
        await query.edit_message_text(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {DIRECTIONS[direction]}\n\n{form_text}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")
            ]])
        )
    
