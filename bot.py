#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import time
import os
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler, 
    ContextTypes, filters
)

from config import BOT_TOKEN, ADMIN_CHATS, DIRECTIONS, APPLICATION_FORM_SEND, APPLICATION_FORM_RECEIVE
from database import KPDatabase
from models.rate_limiter import RateLimiter
from handlers.user_handler import UserHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)


# –ü—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Bot is running')
    
    def log_message(self, format, *args):
        pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞


def start_health_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ Render"""
    port = int(os.environ.get('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
    logger.info(f"Health check server started on port {port}")
    server.serve_forever()


class ApplicationBot:
    def __init__(self):
        self.user_states = {}
        self.rate_limiter = RateLimiter(max_requests=15, time_window=60)
        self.user_applications = {}
        self.admin_states = {}
        self.db = KPDatabase()
        
        self.user_handler = UserHandler(self.db, self.user_states, self.user_applications)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await self.user_handler.start(update, context)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.db.is_user_blocked(user_id):
            await query.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = {
            'user_id': user_id,
            'username': query.from_user.username,
            'first_name': query.from_user.first_name,
            'last_name': query.from_user.last_name
        }
        self.db.add_or_update_user(user_data)
        
        # Rate limiting
        if not self.rate_limiter.is_allowed(user_id):
            remaining_time = self.rate_limiter.get_remaining_time(user_id)
            await query.answer(f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥.", show_alert=True)
            return
        
        await query.answer()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
        if query.data == "restart":
            await self.user_handler.start(update, context)
        elif query.data.startswith("operation_"):
            await self.user_handler.handle_operation_selection(update, context)
        elif query.data.startswith("direction_"):
            await self.user_handler.handle_direction_selection(update, context)
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.db.is_user_blocked(user_id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = {
            'user_id': user_id,
            'username': update.effective_user.username,
            'first_name': update.effective_user.first_name,
            'last_name': update.effective_user.last_name
        }
        self.db.add_or_update_user(user_data)
        
        # Rate limiting
        if not self.rate_limiter.is_allowed(user_id):
            remaining_time = self.rate_limiter.get_remaining_time(user_id)
            await update.message.reply_text(
                f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞
        if update.message.text.startswith('/'):
            await self.handle_admin_command(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        if str(chat_id) in [str(chat_id_config) for chat_id_config in ADMIN_CHATS.values()]:
            logger.info(f"–≠—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            if update.message.reply_to_message and update.message.reply_to_message.from_user.is_bot:
                logger.info(f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
                await self.handle_admin_response(update, context)
                return
            
            # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await self.process_application(update, context)
    
    async def process_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_states or self.user_states[user_id]['state'] != 'waiting_application':
            await update.message.reply_text(
                "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
            return
        
        user_state = self.user_states[user_id]
        direction = user_state['direction']
        operation = user_state.get('operation', 'send')
        application_text = update.message.text.strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        operation_text = "–ö–õ–ò–ï–ù–¢ –ü–õ–ê–¢–ò–¢" if operation == 'send' else "–ü–õ–ê–¢–ò–ú –ù–ê –ö–õ–ò–ï–ù–¢–ê"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.user_applications[user_id] = {
            'direction': direction,
            'operation': operation,
            'application_text': application_text,
            'timestamp': time.time(),
            'admin_chat_id': ADMIN_CHATS[direction]
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
        admin_message = f"""
üìã –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê

üí∏ <b>{operation_text}</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.effective_user.username or update.effective_user.first_name}
üÜî ID: {user_id}
üèóÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {DIRECTIONS[direction]}
üìù –ó–∞—è–≤–∫–∞: {application_text}

‚è∞ –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHATS[direction],
                text=admin_message,
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{DIRECTIONS[direction]}'!\n\n"
                f"üí∏ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_text}\n\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del self.user_states[user_id]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_admin_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        reply_to_message = update.message.reply_to_message
        
        if not reply_to_message or not reply_to_message.from_user.is_bot:
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        bot_message_text = reply_to_message.text
        if "ID: " not in bot_message_text:
            return
        
        try:
            user_id_line = [line for line in bot_message_text.split('\n') if 'ID:' in line][0]
            user_id = int(user_id_line.split('ID:')[1].strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response_text = update.message.text
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{response_text}"
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞: {e}")
    
    async def handle_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞"""
        message_text = update.message.text.lower()
        chat_id = update.effective_chat.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
        is_admin_chat = False
        admin_direction = None
        for direction, chat_id_config in ADMIN_CHATS.items():
            if str(chat_id) == str(chat_id_config):
                is_admin_chat = True
                admin_direction = direction
                break
        
        if not is_admin_chat:
            return
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É: {message_text} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if message_text.startswith('/help_admin'):
            help_text = """
üîß –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê:

üë• /users - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üÜï /new_users - –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ 7 –¥–Ω–µ–π)
üö´ /block <user_id> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚úÖ /unblock <user_id> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚ùì /help_admin - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
            """
            await context.bot.send_message(chat_id=chat_id, text=help_text)
        
        elif message_text.startswith('/users'):
            await self._handle_users_command(update, context)
        
        elif message_text.startswith('/new_users'):
            await self._handle_new_users_command(update, context)
        
        elif message_text.startswith('/block'):
            await self._handle_block_command(update, context)
        
        elif message_text.startswith('/unblock'):
            await self._handle_unblock_command(update, context)
    
    async def _handle_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        chat_id = update.effective_chat.id
        users = self.db.get_all_users()
        
        if not users:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
            
        message = "üë• –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ë–û–¢–ê:\n\n"
        
        for i, user in enumerate(users[:50], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 50
            status = "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" if user['is_blocked'] else "‚úÖ –ê–ö–¢–ò–í–ï–ù"
            username = f"@{user['username']}" if user['username'] else "–ë–µ–∑ username"
            name = f"{user['first_name']} {user['last_name']}".strip() if user['last_name'] else user['first_name']
            
            message += f"{i}. {username}\n"
            message += f"   –ò–º—è: {name}\n"
            message += f"   ID: {user['user_id']}\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"   –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: {user['first_seen']}\n"
            message += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_activity']}\n\n"
        
        if len(users) > 50:
            message += f"... –∏ –µ—â–µ {len(users) - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await context.bot.send_message(chat_id=chat_id, text=message)
    
    async def _handle_new_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""
        chat_id = update.effective_chat.id
        users = self.db.get_new_users(7)
        
        if not users:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        message = f"üÜï –ù–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (–∑–∞ 7 –¥–Ω–µ–π): {len(users)}\n\n"
        
        for i, user in enumerate(users, 1):
            status = "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" if user['is_blocked'] else "‚úÖ –ê–ö–¢–ò–í–ï–ù"
            username = f"@{user['username']}" if user['username'] else "–ë–µ–∑ username"
            name = f"{user['first_name']} {user['last_name']}".strip() if user['last_name'] else user['first_name']
            
            message += f"{i}. {username}\n"
            message += f"   –ò–º—è: {name}\n"
            message += f"   ID: {user['user_id']}\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['first_seen']}\n\n"
        
        await context.bot.send_message(chat_id=chat_id, text=message)
    
    async def _handle_block_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id
        message_text = update.message.text.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message_text.split()
        if len(parts) < 2:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <user_id>")
            return
        
        try:
            user_id = int(parts[1])
        except ValueError:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        if self.db.block_user(user_id):
            await context.bot.send_message(chat_id=chat_id, text=f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    
    async def _handle_unblock_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id
        message_text = update.message.text.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message_text.split()
        if len(parts) < 2:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <user_id>")
            return
        
        try:
            user_id = int(parts[1])
        except ValueError:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        if self.db.unblock_user(user_id):
            await context.bot.send_message(chat_id=chat_id, text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    if not BOT_TOKEN:
        print("–û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    print(f"BOT_TOKEN: {'*' * 10}{BOT_TOKEN[-4:]}")
    
    print("\n–ê–¥–º–∏–Ω—Å–∫–∏–µ —á–∞—Ç—ã:")
    for direction, chat_id in ADMIN_CHATS.items():
        status = "OK" if chat_id else "–ù–ï –ù–ê–°–¢–†–û–ï–ù"
        print(f"  {status} {direction}: {chat_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    if not any(ADMIN_CHATS.values()):
        print("–û–®–ò–ë–ö–ê: –ù–∏ –æ–¥–∏–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render.com
    health_thread = Thread(target=start_health_server, daemon=True)
    health_thread.start()
    
    print("\n–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    bot = ApplicationBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–≤—Å–µ —á–∞—Ç—ã)
    application.add_handler(MessageHandler(
        filters.TEXT & filters.COMMAND, 
        bot.handle_text_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥—ã, –≤—Å–µ —á–∞—Ç—ã)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        bot.handle_text_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()


if __name__ == '__main__':
    main()
